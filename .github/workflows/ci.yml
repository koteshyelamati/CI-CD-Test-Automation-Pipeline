name: Python Microservice CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11"]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run tests with PyTest, generate coverage and HTML report
      run: |
        pip install pytest-html # Ensure pytest-html is installed
        pytest --cov=app --cov-report=xml --cov-report=term-missing \
               --html=pytest-report.html --self-contained-html \
               --junitxml=junit-report.xml \
               tests/

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }} # Required for private repos, but good practice
        files: ./coverage.xml
        fail_ci_if_error: true
        verbose: true

    - name: Archive Pytest HTML Report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: pytest-html-report-${{ matrix.python-version }}
        path: pytest-report.html

    - name: Archive JUnit XML Test Results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: junit-xml-results-${{ matrix.python-version }}
        path: junit-report.xml

    - name: Generate Test Report Summary
      if: always()
      run: |
        echo "### Pytest Report Summary (${{ matrix.python-version }})" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        # Basic summary, assuming junit-report.xml exists from pytest run
        if [ -f junit-report.xml ]; then
          TOTAL_TESTS=$(grep -oP 'tests="\K[0-9]+' junit-report.xml | awk '{s+=$1} END {print s}')
          FAILED_TESTS=$(grep -oP 'failures="\K[0-9]+' junit-report.xml | awk '{s+=$1} END {print s}')
          ERROR_TESTS=$(grep -oP 'errors="\K[0-9]+' junit-report.xml | awk '{s+=$1} END {print s}')
          SKIPPED_TESTS=$(grep -oP 'skipped="\K[0-9]+' junit-report.xml | awk '{s+=$1} END {print s}')
          PASSED_TESTS=$((TOTAL_TESTS - FAILED_TESTS - ERROR_TESTS - SKIPPED_TESTS))
          echo "- **Total Tests:** $TOTAL_TESTS" >> $GITHUB_STEP_SUMMARY
          echo "- **Passed:** $PASSED_TESTS" >> $GITHUB_STEP_SUMMARY
          echo "- **Failed:** $FAILED_TESTS" >> $GITHUB_STEP_SUMMARY
          echo "- **Errors:** $ERROR_TESTS" >> $GITHUB_STEP_SUMMARY
          echo "- **Skipped:** $SKIPPED_TESTS" >> $GITHUB_STEP_SUMMARY
        else
          echo "junit-report.xml not found. Cannot generate detailed summary." >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "A detailed HTML report and JUnit XML results have been uploaded as artifacts." >> $GITHUB_STEP_SUMMARY
        echo "Coverage report uploaded to Codecov." >> $GITHUB_STEP_SUMMARY

    # Slack Notification - Placeholder - Will require SLACK_WEBHOOK_URL secret
    # - name: Send Slack Notification on Failure
    #   if: failure()
    #   uses: rtCamp/action-slack-notify@v2
    #   env:
    #     SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
    #     SLACK_MESSAGE: 'Build Failed: ${{ github.workflow }} - ${{ github.repository }}'
    #     SLACK_TITLE: 'Build Failed on ${{ github.ref }}'
    #     SLACK_COLOR: 'danger'

    # - name: Notify Slack on Success
    #   if: success()
    #   uses: rtCamp/action-slack-notify@v2
    #   env:
    #     SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
    #     SLACK_MESSAGE: 'Build Successful: ${{ github.workflow }} - ${{ github.repository }}'
    #     SLACK_TITLE: 'Build Successful on ${{ github.ref }}'
    #     SLACK_COLOR: 'good'
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }} # Pass the token to the step
        CI: true # Recommended by Codecov
